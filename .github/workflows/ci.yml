name: CI/CD Pipeline with Detailed Coverage Report

on:
  push:
  pull_request:

jobs:
  build:
    name: Run Tests & Generate Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests and generate coverage report
        run: |
          python -m pytest tests --disable-warnings --cov=. --cov-report=xml:coverage.xml

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  coverage:
    name: Publish Coverage Summary and Missing Lines
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: Publish Overall Coverage Summary
        run: |
          echo "## Overall Coverage" >> $GITHUB_STEP_SUMMARY
          python -c "import xml.etree.ElementTree as ET; \
                     root = ET.parse('coverage.xml').getroot(); \
                     print('**Line Coverage:** {:.2%}'.format(float(root.attrib.get('line-rate', 0))))" >> $GITHUB_STEP_SUMMARY

      - name: Publish Missing Lines Summary
        run: |
          echo "## Missing Coverage Details" >> $GITHUB_STEP_SUMMARY
          python - <<'EOF' >> $GITHUB_STEP_SUMMARY
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          files_missing = {}
          # Se asume que la estructura es: <coverage> -> <packages> -> <package> -> <classes> -> <class filename="..."> -> <lines> -> <line number="..." hits="...">
          for cls in root.findall(".//class"):
              filename = cls.get("filename")
              if not filename:
                  continue
              missing = []
              for line in cls.findall("./lines/line"):
                  if int(line.get("hits", 0)) == 0:
                      missing.append(line.get("number"))
              if missing:
                  files_missing[filename] = missing

          if files_missing:
              for file, lines in files_missing.items():
                  print(f"**File:** {file}")
                  print(f"Missing lines: {', '.join(lines)}\n")
          else:
              print("All files are fully covered.")
          EOF



  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Checkout del código
  #       uses: actions/checkout@v3

  #     - name: Configurar Python y entorno virtual
  #       run: |
  #         python -m venv venv
  #         source venv/bin/activate
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt

  #     - name: Desplegar a Staging (Ejemplo)
  #       run: |
  #         source venv/bin/activate
  #         echo "Desplegando la aplicación..."
  #         uvicorn main:app --reload
