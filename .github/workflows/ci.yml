name: CI/CD Pipeline with Detailed Coverage Report

on:
  push:
  pull_request:

jobs:
  build:
    name: Run Tests & Generate Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests and generate coverage report
        run: |
          pytest --disable-warnings --cov=. --cov-report=xml:coverage.xml

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  coverage:
    name: Publish Detailed Coverage Report
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: List all files in the runner
        run: ls -R

      - name: Check if coverage.xml exists
        run: ls -lah coverage.xml || echo "coverage.xml NOT FOUND"

      - name: Publish Detailed Coverage Summary
        run: |
          echo "## Detailed Coverage Report" >> $GITHUB_STEP_SUMMARY
          python <<EOF >> $GITHUB_STEP_SUMMARY
          import xml.etree.ElementTree as ET
          import os

          def get_missing_lines():
              if not os.path.exists('coverage.xml'):
                  print("Error: coverage.xml not found.")
                  return {}
              tree = ET.parse('coverage.xml')
              root = tree.getroot()
              files_missing = {}
              for cls in root.findall(".//class"):
                  filename = cls.get("filename")
                  if not filename:
                      continue
                  missing = []
                  for line in cls.findall("./lines/line"):
                      try:
                          if int(line.get("hits", "0")) == 0:
                              missing.append(int(line.get("number")))
                      except Exception:
                          continue
                  if missing:
                      files_missing[filename] = sorted(set(missing))
              return files_missing

          def highlight_file(filename, missing_lines):
              if not os.path.exists(filename):
                  return f"Error: File '{filename}' does not exist in the current directory."

              try:
                  with open(filename, "r", encoding="utf-8") as f:
                      lines = f.readlines()
              except Exception as e:
                  return f"Error reading file {filename}: {e}"
              output = []
              context_radius = 1
              groups = []
              current_group = []
              for line in missing_lines:
                  if not current_group:
                      current_group = [line]
                  elif line == current_group[-1] + 1:
                      current_group.append(line)
                  else:
                      groups.append(current_group)
                      current_group = [line]
              if current_group:
                  groups.append(current_group)
              for group in groups:
                  start = max(group[0] - context_radius, 1)
                  end = min(group[-1] + context_radius, len(lines))
                  for i in range(start, end + 1):
                      code = lines[i-1].rstrip().replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
                      if i in group:
                          output.append(f'<span style="color: red;">{i:4d}: {code}</span>')
                      else:
                          output.append(f'<span style="color: green;">{i:4d}: {code}</span>')
                  output.append("")
              return "\\n".join(output)

          missing = get_missing_lines()
          summary = ""
          if missing:
              for filename, lines_missing in missing.items():
                  summary += f"<h3>File: {filename}</h3>\\n"
                  summary += f"<p>Missing lines: {', '.join(map(str, lines_missing))}</p>\\n"
                  snippet = highlight_file(filename, lines_missing)
                  summary += f"<pre>{snippet}</pre>\\n"
          else:
              summary = "All files are fully covered."

          print(summary)
          EOF
